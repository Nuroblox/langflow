"""add title,desc and attachments to tasks

Revision ID: 318889d49162
Revises: 02e8c952e7ca
Create Date: 2024-09-04 12:05:04.635068

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision: str = "318889d49162"
down_revision: Union[str, None] = "02e8c952e7ca"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)  # type: ignore
    table_names = inspector.get_table_names()
    # ### commands auto generated by Alembic - please adjust! ###
    if "task" in table_names:
        columns = inspector.get_columns("task")
        column_names = [column["name"] for column in columns]
        indexes = inspector.get_indexes("task")
        index_names = [index["name"] for index in indexes]

        with op.batch_alter_table("task", schema=None) as batch_op:
            if "title" not in column_names:
                batch_op.add_column(sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False))
            if "description" not in column_names:
                batch_op.add_column(sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False))
            if "attachments" not in column_names:
                batch_op.add_column(sa.Column("attachments", sa.JSON(), nullable=True))
            if "ix_task_author_id" not in index_names:
                batch_op.create_index(batch_op.f("ix_task_author_id"), ["author_id"], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)  # type: ignore
    table_names = inspector.get_table_names()
    # ### commands auto generated by Alembic - please adjust! ###
    if "task" in table_names:
        columns = inspector.get_columns("task")
        column_names = [column["name"] for column in columns]
        indexes = inspector.get_indexes("task")
        index_names = [index["name"] for index in indexes]

        with op.batch_alter_table("task", schema=None) as batch_op:
            if "ix_task_author_id" in index_names:
                batch_op.drop_index(batch_op.f("ix_task_author_id"))
            if "attachments" in column_names:
                batch_op.drop_column("attachments")
            if "description" in column_names:
                batch_op.drop_column("description")
            if "title" in column_names:
                batch_op.drop_column("title")

    # ### end Alembic commands ###
